{"filter":false,"title":"app.py","tooltip":"/application-code/app.py","undoManager":{"mark":38,"position":38,"stack":[[{"start":{"row":135,"column":35},"end":{"row":135,"column":36},"action":"remove","lines":["0"],"id":2},{"start":{"row":135,"column":34},"end":{"row":135,"column":35},"action":"remove","lines":["8"]},{"start":{"row":135,"column":33},"end":{"row":135,"column":34},"action":"remove","lines":["0"]}],[{"start":{"row":135,"column":33},"end":{"row":135,"column":34},"action":"insert","lines":["1"],"id":3}],[{"start":{"row":0,"column":0},"end":{"row":136,"column":0},"action":"remove","lines":["from flask import Flask, render_template, request","from pymysql import connections","import os","import random","import argparse","","","app = Flask(__name__)","","DBHOST = os.environ.get(\"DBHOST\") or \"localhost\"","DBUSER = os.environ.get(\"DBUSER\") or \"root\"","DBPWD = os.environ.get(\"DBPWD\") or \"passwors\"","DATABASE = os.environ.get(\"DATABASE\") or \"employees\"","COLOR_FROM_ENV = os.environ.get('APP_COLOR') or \"lime\"","DBPORT = int(os.environ.get(\"DBPORT\"))","","# Create a connection to the MySQL database","db_conn = connections.Connection(","    host= DBHOST,","    port=DBPORT,","    user= DBUSER,","    password= DBPWD, ","    db= DATABASE","    ",")","output = {}","table = 'employee';","","# Define the supported color codes","color_codes = {","    \"red\": \"#e74c3c\",","    \"green\": \"#16a085\",","    \"blue\": \"#89CFF0\",","    \"blue2\": \"#30336b\",","    \"pink\": \"#f4c2c2\",","    \"darkblue\": \"#130f40\",","    \"lime\": \"#C1FF9C\",","}","","","# Create a string of supported colors","SUPPORTED_COLORS = \",\".join(color_codes.keys())","","# Generate a random color","COLOR = random.choice([\"red\", \"green\", \"blue\", \"blue2\", \"darkblue\", \"pink\", \"lime\"])","","","@app.route(\"/\", methods=['GET', 'POST'])","def home():","    return render_template('addemp.html', color=color_codes[COLOR])","","@app.route(\"/about\", methods=['GET','POST'])","def about():","    return render_template('about.html', color=color_codes[COLOR])","    ","@app.route(\"/addemp\", methods=['POST'])","def AddEmp():","    emp_id = request.form['emp_id']","    first_name = request.form['first_name']","    last_name = request.form['last_name']","    primary_skill = request.form['primary_skill']","    location = request.form['location']","","  ","    insert_sql = \"INSERT INTO employee VALUES (%s, %s, %s, %s, %s)\"","    cursor = db_conn.cursor()","","    try:","        ","        cursor.execute(insert_sql,(emp_id, first_name, last_name, primary_skill, location))","        db_conn.commit()","        emp_name = \"\" + first_name + \" \" + last_name","","    finally:","        cursor.close()","","    print(\"all modification done...\")","    return render_template('addempoutput.html', name=emp_name, color=color_codes[COLOR])","","@app.route(\"/getemp\", methods=['GET', 'POST'])","def GetEmp():","    return render_template(\"getemp.html\", color=color_codes[COLOR])","","","@app.route(\"/fetchdata\", methods=['GET','POST'])","def FetchData():","    emp_id = request.form['emp_id']","","    output = {}","    select_sql = \"SELECT emp_id, first_name, last_name, primary_skill, location from employee where emp_id=%s\"","    cursor = db_conn.cursor()","","    try:","        cursor.execute(select_sql,(emp_id))","        result = cursor.fetchone()","        ","        # Add No Employee found form","        output[\"emp_id\"] = result[0]","        output[\"first_name\"] = result[1]","        output[\"last_name\"] = result[2]","        output[\"primary_skills\"] = result[3]","        output[\"location\"] = result[4]","        ","    except Exception as e:","        print(e)","","    finally:","        cursor.close()","","    return render_template(\"getempoutput.html\", id=output[\"emp_id\"], fname=output[\"first_name\"],","                           lname=output[\"last_name\"], interest=output[\"primary_skills\"], location=output[\"location\"], color=color_codes[COLOR])","","if __name__ == '__main__':","    ","    # Check for Command Line Parameters for color","    parser = argparse.ArgumentParser()","    parser.add_argument('--color', required=False)","    args = parser.parse_args()","","    if args.color:","        print(\"Color from command line argument =\" + args.color)","        COLOR = args.color","        if COLOR_FROM_ENV:","            print(\"A color was set through environment variable -\" + COLOR_FROM_ENV + \". However, color from command line argument takes precendence.\")","    elif COLOR_FROM_ENV:","        print(\"No Command line argument. Color from environment variable =\" + COLOR_FROM_ENV)","        COLOR = COLOR_FROM_ENV","    else:","        print(\"No command line argument or environment variable. Picking a Random Color =\" + COLOR)","","    # Check if input color is a supported one","    if COLOR not in color_codes:","        print(\"Color not supported. Received '\" + COLOR + \"' expected one of \" + SUPPORTED_COLORS)","        exit(1)","","    app.run(host='0.0.0.0',port=81,debug=True)",""],"id":4}],[{"start":{"row":0,"column":0},"end":{"row":128,"column":55},"action":"insert","lines":["from flask import Flask, render_template, request","from pymysql import connections","import os","import argparse","import boto3","import logging","","app = Flask(__name__)","","# DB Config from environment (Secrets in K8s)","DBHOST = os.environ.get(\"DBHOST\", \"localhost\")","DBUSER = os.environ.get(\"DBUSER\", \"root\")","DBPWD = os.environ.get(\"DBPWD\", \"password\")","DATABASE = os.environ.get(\"DATABASE\", \"employees\")","DBPORT = int(os.environ.get(\"DBPORT\", 3306))","","# Group info from ConfigMap","GROUP_NAME = os.environ.get(\"GROUP_NAME\", \"CLO835 Team\")","GROUP_SLOGAN = os.environ.get(\"GROUP_SLOGAN\", \"Delivering Cloud Excellence\")","","# Background image info from ConfigMap","BG_BUCKET = os.environ.get(\"BG_BUCKET\")","BG_KEY = os.environ.get(\"BG_KEY\")  # e.g., \"background.jpg\"","","# AWS credentials from Secrets","AWS_ACCESS_KEY_ID = os.environ.get(\"AWS_ACCESS_KEY_ID\")","AWS_SECRET_ACCESS_KEY = os.environ.get(\"AWS_SECRET_ACCESS_KEY\")","AWS_REGION = os.environ.get(\"AWS_REGION\", \"us-east-1\")","","# Static file path","BG_LOCAL_PATH = os.path.join(\"static\", \"background.jpg\")","","# Logging setup","logging.basicConfig(level=logging.INFO)","","# Download background image from private S3","def download_background():","    if not BG_BUCKET or not BG_KEY:","        app.logger.warning(\"Background image S3 details are not set.\")","        return","    try:","        s3_client = boto3.client(","            \"s3\",","            aws_access_key_id=AWS_ACCESS_KEY_ID,","            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,","            region_name=AWS_REGION","        )","        s3_client.download_file(BG_BUCKET, BG_KEY, BG_LOCAL_PATH)","        app.logger.info(f\"Background image downloaded from s3://{BG_BUCKET}/{BG_KEY}\")","    except Exception as e:","        app.logger.error(f\"Failed to download background image: {e}\")","","# MySQL Connection","db_conn = connections.Connection(","    host=DBHOST,","    port=DBPORT,","    user=DBUSER,","    password=DBPWD,","    db=DATABASE",")","","@app.route(\"/\", methods=['GET', 'POST'])","def home():","    return render_template('addemp.html', group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/about\", methods=['GET','POST'])","def about():","    return render_template('about.html', group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/addemp\", methods=['POST'])","def AddEmp():","    emp_id = request.form['emp_id']","    first_name = request.form['first_name']","    last_name = request.form['last_name']","    primary_skill = request.form['primary_skill']","    location = request.form['location']","","    insert_sql = \"INSERT INTO employee VALUES (%s, %s, %s, %s, %s)\"","    cursor = db_conn.cursor()","    try:","        cursor.execute(insert_sql, (emp_id, first_name, last_name, primary_skill, location))","        db_conn.commit()","        emp_name = f\"{first_name} {last_name}\"","    finally:","        cursor.close()","","    return render_template('addempoutput.html', name=emp_name, group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/getemp\", methods=['GET', 'POST'])","def GetEmp():","    return render_template(\"getemp.html\", group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/fetchdata\", methods=['GET','POST'])","def FetchData():","    emp_id = request.form['emp_id']","    output = {}","    select_sql = \"SELECT emp_id, first_name, last_name, primary_skill, location FROM employee WHERE emp_id=%s\"","    cursor = db_conn.cursor()","","    try:","        cursor.execute(select_sql, (emp_id,))","        result = cursor.fetchone()","        if result:","            output[\"emp_id\"], output[\"first_name\"], output[\"last_name\"], output[\"primary_skills\"], output[\"location\"] = result","        else:","            return f\"No employee found with ID {emp_id}\"","    except Exception as e:","        app.logger.error(e)","    finally:","        cursor.close()","","    return render_template(","        \"getempoutput.html\",","        id=output[\"emp_id\"],","        fname=output[\"first_name\"],","        lname=output[\"last_name\"],","        interest=output[\"primary_skills\"],","        location=output[\"location\"],","        group_name=GROUP_NAME,","        group_slogan=GROUP_SLOGAN","    )","","if __name__ == '__main__':","    parser = argparse.ArgumentParser()","    parser.add_argument('--port', required=False, type=int, default=81)","    args = parser.parse_args()","","    download_background()","    app.run(host='0.0.0.0', port=args.port, debug=True)"],"id":5}],[{"start":{"row":0,"column":0},"end":{"row":128,"column":55},"action":"remove","lines":["from flask import Flask, render_template, request","from pymysql import connections","import os","import argparse","import boto3","import logging","","app = Flask(__name__)","","# DB Config from environment (Secrets in K8s)","DBHOST = os.environ.get(\"DBHOST\", \"localhost\")","DBUSER = os.environ.get(\"DBUSER\", \"root\")","DBPWD = os.environ.get(\"DBPWD\", \"password\")","DATABASE = os.environ.get(\"DATABASE\", \"employees\")","DBPORT = int(os.environ.get(\"DBPORT\", 3306))","","# Group info from ConfigMap","GROUP_NAME = os.environ.get(\"GROUP_NAME\", \"CLO835 Team\")","GROUP_SLOGAN = os.environ.get(\"GROUP_SLOGAN\", \"Delivering Cloud Excellence\")","","# Background image info from ConfigMap","BG_BUCKET = os.environ.get(\"BG_BUCKET\")","BG_KEY = os.environ.get(\"BG_KEY\")  # e.g., \"background.jpg\"","","# AWS credentials from Secrets","AWS_ACCESS_KEY_ID = os.environ.get(\"AWS_ACCESS_KEY_ID\")","AWS_SECRET_ACCESS_KEY = os.environ.get(\"AWS_SECRET_ACCESS_KEY\")","AWS_REGION = os.environ.get(\"AWS_REGION\", \"us-east-1\")","","# Static file path","BG_LOCAL_PATH = os.path.join(\"static\", \"background.jpg\")","","# Logging setup","logging.basicConfig(level=logging.INFO)","","# Download background image from private S3","def download_background():","    if not BG_BUCKET or not BG_KEY:","        app.logger.warning(\"Background image S3 details are not set.\")","        return","    try:","        s3_client = boto3.client(","            \"s3\",","            aws_access_key_id=AWS_ACCESS_KEY_ID,","            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,","            region_name=AWS_REGION","        )","        s3_client.download_file(BG_BUCKET, BG_KEY, BG_LOCAL_PATH)","        app.logger.info(f\"Background image downloaded from s3://{BG_BUCKET}/{BG_KEY}\")","    except Exception as e:","        app.logger.error(f\"Failed to download background image: {e}\")","","# MySQL Connection","db_conn = connections.Connection(","    host=DBHOST,","    port=DBPORT,","    user=DBUSER,","    password=DBPWD,","    db=DATABASE",")","","@app.route(\"/\", methods=['GET', 'POST'])","def home():","    return render_template('addemp.html', group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/about\", methods=['GET','POST'])","def about():","    return render_template('about.html', group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/addemp\", methods=['POST'])","def AddEmp():","    emp_id = request.form['emp_id']","    first_name = request.form['first_name']","    last_name = request.form['last_name']","    primary_skill = request.form['primary_skill']","    location = request.form['location']","","    insert_sql = \"INSERT INTO employee VALUES (%s, %s, %s, %s, %s)\"","    cursor = db_conn.cursor()","    try:","        cursor.execute(insert_sql, (emp_id, first_name, last_name, primary_skill, location))","        db_conn.commit()","        emp_name = f\"{first_name} {last_name}\"","    finally:","        cursor.close()","","    return render_template('addempoutput.html', name=emp_name, group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/getemp\", methods=['GET', 'POST'])","def GetEmp():","    return render_template(\"getemp.html\", group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/fetchdata\", methods=['GET','POST'])","def FetchData():","    emp_id = request.form['emp_id']","    output = {}","    select_sql = \"SELECT emp_id, first_name, last_name, primary_skill, location FROM employee WHERE emp_id=%s\"","    cursor = db_conn.cursor()","","    try:","        cursor.execute(select_sql, (emp_id,))","        result = cursor.fetchone()","        if result:","            output[\"emp_id\"], output[\"first_name\"], output[\"last_name\"], output[\"primary_skills\"], output[\"location\"] = result","        else:","            return f\"No employee found with ID {emp_id}\"","    except Exception as e:","        app.logger.error(e)","    finally:","        cursor.close()","","    return render_template(","        \"getempoutput.html\",","        id=output[\"emp_id\"],","        fname=output[\"first_name\"],","        lname=output[\"last_name\"],","        interest=output[\"primary_skills\"],","        location=output[\"location\"],","        group_name=GROUP_NAME,","        group_slogan=GROUP_SLOGAN","    )","","if __name__ == '__main__':","    parser = argparse.ArgumentParser()","    parser.add_argument('--port', required=False, type=int, default=81)","    args = parser.parse_args()","","    download_background()","    app.run(host='0.0.0.0', port=args.port, debug=True)"],"id":6}],[{"start":{"row":0,"column":0},"end":{"row":128,"column":55},"action":"insert","lines":["from flask import Flask, render_template, request","from pymysql import connections","import os","import argparse","import boto3","import logging","","app = Flask(__name__)","","# DB Config from environment (Secrets in K8s)","DBHOST = os.environ.get(\"DBHOST\", \"localhost\")","DBUSER = os.environ.get(\"DBUSER\", \"root\")","DBPWD = os.environ.get(\"DBPWD\", \"password\")","DATABASE = os.environ.get(\"DATABASE\", \"employees\")","DBPORT = int(os.environ.get(\"DBPORT\", 3306))","","# Group info from ConfigMap","GROUP_NAME = os.environ.get(\"GROUP_NAME\", \"CLO835 Team\")","GROUP_SLOGAN = os.environ.get(\"GROUP_SLOGAN\", \"Delivering Cloud Excellence\")","","# Background image info from ConfigMap","BG_BUCKET = os.environ.get(\"BG_BUCKET\")","BG_KEY = os.environ.get(\"BG_KEY\")  # e.g., \"background.jpg\"","","# AWS credentials from Secrets","AWS_ACCESS_KEY_ID = os.environ.get(\"AWS_ACCESS_KEY_ID\")","AWS_SECRET_ACCESS_KEY = os.environ.get(\"AWS_SECRET_ACCESS_KEY\")","AWS_REGION = os.environ.get(\"AWS_REGION\", \"us-east-1\")","","# Static file path","BG_LOCAL_PATH = os.path.join(\"static\", \"background.jpg\")","","# Logging setup","logging.basicConfig(level=logging.INFO)","","# Download background image from private S3","def download_background():","    if not BG_BUCKET or not BG_KEY:","        app.logger.warning(\"Background image S3 details are not set.\")","        return","    try:","        s3_client = boto3.client(","            \"s3\",","            aws_access_key_id=AWS_ACCESS_KEY_ID,","            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,","            region_name=AWS_REGION","        )","        s3_client.download_file(BG_BUCKET, BG_KEY, BG_LOCAL_PATH)","        app.logger.info(f\"Background image downloaded from s3://{BG_BUCKET}/{BG_KEY}\")","    except Exception as e:","        app.logger.error(f\"Failed to download background image: {e}\")","","# MySQL Connection","db_conn = connections.Connection(","    host=DBHOST,","    port=DBPORT,","    user=DBUSER,","    password=DBPWD,","    db=DATABASE",")","","@app.route(\"/\", methods=['GET', 'POST'])","def home():","    return render_template('addemp.html', group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/about\", methods=['GET','POST'])","def about():","    return render_template('about.html', group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/addemp\", methods=['POST'])","def AddEmp():","    emp_id = request.form['emp_id']","    first_name = request.form['first_name']","    last_name = request.form['last_name']","    primary_skill = request.form['primary_skill']","    location = request.form['location']","","    insert_sql = \"INSERT INTO employee VALUES (%s, %s, %s, %s, %s)\"","    cursor = db_conn.cursor()","    try:","        cursor.execute(insert_sql, (emp_id, first_name, last_name, primary_skill, location))","        db_conn.commit()","        emp_name = f\"{first_name} {last_name}\"","    finally:","        cursor.close()","","    return render_template('addempoutput.html', name=emp_name, group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/getemp\", methods=['GET', 'POST'])","def GetEmp():","    return render_template(\"getemp.html\", group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/fetchdata\", methods=['GET','POST'])","def FetchData():","    emp_id = request.form['emp_id']","    output = {}","    select_sql = \"SELECT emp_id, first_name, last_name, primary_skill, location FROM employee WHERE emp_id=%s\"","    cursor = db_conn.cursor()","","    try:","        cursor.execute(select_sql, (emp_id,))","        result = cursor.fetchone()","        if result:","            output[\"emp_id\"], output[\"first_name\"], output[\"last_name\"], output[\"primary_skills\"], output[\"location\"] = result","        else:","            return f\"No employee found with ID {emp_id}\"","    except Exception as e:","        app.logger.error(e)","    finally:","        cursor.close()","","    return render_template(","        \"getempoutput.html\",","        id=output[\"emp_id\"],","        fname=output[\"first_name\"],","        lname=output[\"last_name\"],","        interest=output[\"primary_skills\"],","        location=output[\"location\"],","        group_name=GROUP_NAME,","        group_slogan=GROUP_SLOGAN","    )","","if __name__ == '__main__':","    parser = argparse.ArgumentParser()","    parser.add_argument('--port', required=False, type=int, default=81)","    args = parser.parse_args()","","    download_background()","    app.run(host='0.0.0.0', port=args.port, debug=True)"],"id":7}],[{"start":{"row":128,"column":33},"end":{"row":128,"column":42},"action":"remove","lines":["args.port"],"id":8},{"start":{"row":128,"column":33},"end":{"row":128,"column":34},"action":"insert","lines":["8"]},{"start":{"row":128,"column":34},"end":{"row":128,"column":35},"action":"insert","lines":["1"]}],[{"start":{"row":128,"column":0},"end":{"row":128,"column":48},"action":"remove","lines":["    app.run(host='0.0.0.0', port=81, debug=True)"],"id":9},{"start":{"row":128,"column":0},"end":{"row":128,"column":46},"action":"insert","lines":["  app.run(host='0.0.0.0',port=8080,debug=True)"]}],[{"start":{"row":128,"column":2},"end":{"row":128,"column":3},"action":"insert","lines":[" "],"id":10},{"start":{"row":128,"column":3},"end":{"row":128,"column":4},"action":"insert","lines":[" "]}],[{"start":{"row":128,"column":35},"end":{"row":128,"column":36},"action":"remove","lines":["0"],"id":11},{"start":{"row":128,"column":34},"end":{"row":128,"column":35},"action":"remove","lines":["8"]},{"start":{"row":128,"column":33},"end":{"row":128,"column":34},"action":"remove","lines":["0"]}],[{"start":{"row":128,"column":33},"end":{"row":128,"column":34},"action":"insert","lines":["1"],"id":12}],[{"start":{"row":0,"column":0},"end":{"row":128,"column":46},"action":"remove","lines":["from flask import Flask, render_template, request","from pymysql import connections","import os","import argparse","import boto3","import logging","","app = Flask(__name__)","","# DB Config from environment (Secrets in K8s)","DBHOST = os.environ.get(\"DBHOST\", \"localhost\")","DBUSER = os.environ.get(\"DBUSER\", \"root\")","DBPWD = os.environ.get(\"DBPWD\", \"password\")","DATABASE = os.environ.get(\"DATABASE\", \"employees\")","DBPORT = int(os.environ.get(\"DBPORT\", 3306))","","# Group info from ConfigMap","GROUP_NAME = os.environ.get(\"GROUP_NAME\", \"CLO835 Team\")","GROUP_SLOGAN = os.environ.get(\"GROUP_SLOGAN\", \"Delivering Cloud Excellence\")","","# Background image info from ConfigMap","BG_BUCKET = os.environ.get(\"BG_BUCKET\")","BG_KEY = os.environ.get(\"BG_KEY\")  # e.g., \"background.jpg\"","","# AWS credentials from Secrets","AWS_ACCESS_KEY_ID = os.environ.get(\"AWS_ACCESS_KEY_ID\")","AWS_SECRET_ACCESS_KEY = os.environ.get(\"AWS_SECRET_ACCESS_KEY\")","AWS_REGION = os.environ.get(\"AWS_REGION\", \"us-east-1\")","","# Static file path","BG_LOCAL_PATH = os.path.join(\"static\", \"background.jpg\")","","# Logging setup","logging.basicConfig(level=logging.INFO)","","# Download background image from private S3","def download_background():","    if not BG_BUCKET or not BG_KEY:","        app.logger.warning(\"Background image S3 details are not set.\")","        return","    try:","        s3_client = boto3.client(","            \"s3\",","            aws_access_key_id=AWS_ACCESS_KEY_ID,","            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,","            region_name=AWS_REGION","        )","        s3_client.download_file(BG_BUCKET, BG_KEY, BG_LOCAL_PATH)","        app.logger.info(f\"Background image downloaded from s3://{BG_BUCKET}/{BG_KEY}\")","    except Exception as e:","        app.logger.error(f\"Failed to download background image: {e}\")","","# MySQL Connection","db_conn = connections.Connection(","    host=DBHOST,","    port=DBPORT,","    user=DBUSER,","    password=DBPWD,","    db=DATABASE",")","","@app.route(\"/\", methods=['GET', 'POST'])","def home():","    return render_template('addemp.html', group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/about\", methods=['GET','POST'])","def about():","    return render_template('about.html', group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/addemp\", methods=['POST'])","def AddEmp():","    emp_id = request.form['emp_id']","    first_name = request.form['first_name']","    last_name = request.form['last_name']","    primary_skill = request.form['primary_skill']","    location = request.form['location']","","    insert_sql = \"INSERT INTO employee VALUES (%s, %s, %s, %s, %s)\"","    cursor = db_conn.cursor()","    try:","        cursor.execute(insert_sql, (emp_id, first_name, last_name, primary_skill, location))","        db_conn.commit()","        emp_name = f\"{first_name} {last_name}\"","    finally:","        cursor.close()","","    return render_template('addempoutput.html', name=emp_name, group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/getemp\", methods=['GET', 'POST'])","def GetEmp():","    return render_template(\"getemp.html\", group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/fetchdata\", methods=['GET','POST'])","def FetchData():","    emp_id = request.form['emp_id']","    output = {}","    select_sql = \"SELECT emp_id, first_name, last_name, primary_skill, location FROM employee WHERE emp_id=%s\"","    cursor = db_conn.cursor()","","    try:","        cursor.execute(select_sql, (emp_id,))","        result = cursor.fetchone()","        if result:","            output[\"emp_id\"], output[\"first_name\"], output[\"last_name\"], output[\"primary_skills\"], output[\"location\"] = result","        else:","            return f\"No employee found with ID {emp_id}\"","    except Exception as e:","        app.logger.error(e)","    finally:","        cursor.close()","","    return render_template(","        \"getempoutput.html\",","        id=output[\"emp_id\"],","        fname=output[\"first_name\"],","        lname=output[\"last_name\"],","        interest=output[\"primary_skills\"],","        location=output[\"location\"],","        group_name=GROUP_NAME,","        group_slogan=GROUP_SLOGAN","    )","","if __name__ == '__main__':","    parser = argparse.ArgumentParser()","    parser.add_argument('--port', required=False, type=int, default=81)","    args = parser.parse_args()","","    download_background()","    app.run(host='0.0.0.0',port=81,debug=True)"],"id":19},{"start":{"row":0,"column":0},"end":{"row":136,"column":0},"action":"insert","lines":["from flask import Flask, render_template, request","from pymysql import connections","import os","import random","import argparse","","","app = Flask(__name__)","","DBHOST = os.environ.get(\"DBHOST\") or \"localhost\"","DBUSER = os.environ.get(\"DBUSER\") or \"root\"","DBPWD = os.environ.get(\"DBPWD\") or \"passwors\"","DATABASE = os.environ.get(\"DATABASE\") or \"employees\"","COLOR_FROM_ENV = os.environ.get('APP_COLOR') or \"lime\"","DBPORT = int(os.environ.get(\"DBPORT\"))","","# Create a connection to the MySQL database","db_conn = connections.Connection(","    host= DBHOST,","    port=DBPORT,","    user= DBUSER,","    password= DBPWD, ","    db= DATABASE","    ",")","output = {}","table = 'employee';","","# Define the supported color codes","color_codes = {","    \"red\": \"#e74c3c\",","    \"green\": \"#16a085\",","    \"blue\": \"#89CFF0\",","    \"blue2\": \"#30336b\",","    \"pink\": \"#f4c2c2\",","    \"darkblue\": \"#130f40\",","    \"lime\": \"#C1FF9C\",","}","","","# Create a string of supported colors","SUPPORTED_COLORS = \",\".join(color_codes.keys())","","# Generate a random color","COLOR = random.choice([\"red\", \"green\", \"blue\", \"blue2\", \"darkblue\", \"pink\", \"lime\"])","","","@app.route(\"/\", methods=['GET', 'POST'])","def home():","    return render_template('addemp.html', color=color_codes[COLOR])","","@app.route(\"/about\", methods=['GET','POST'])","def about():","    return render_template('about.html', color=color_codes[COLOR])","    ","@app.route(\"/addemp\", methods=['POST'])","def AddEmp():","    emp_id = request.form['emp_id']","    first_name = request.form['first_name']","    last_name = request.form['last_name']","    primary_skill = request.form['primary_skill']","    location = request.form['location']","","  ","    insert_sql = \"INSERT INTO employee VALUES (%s, %s, %s, %s, %s)\"","    cursor = db_conn.cursor()","","    try:","        ","        cursor.execute(insert_sql,(emp_id, first_name, last_name, primary_skill, location))","        db_conn.commit()","        emp_name = \"\" + first_name + \" \" + last_name","","    finally:","        cursor.close()","","    print(\"all modification done...\")","    return render_template('addempoutput.html', name=emp_name, color=color_codes[COLOR])","","@app.route(\"/getemp\", methods=['GET', 'POST'])","def GetEmp():","    return render_template(\"getemp.html\", color=color_codes[COLOR])","","","@app.route(\"/fetchdata\", methods=['GET','POST'])","def FetchData():","    emp_id = request.form['emp_id']","","    output = {}","    select_sql = \"SELECT emp_id, first_name, last_name, primary_skill, location from employee where emp_id=%s\"","    cursor = db_conn.cursor()","","    try:","        cursor.execute(select_sql,(emp_id))","        result = cursor.fetchone()","        ","        # Add No Employee found form","        output[\"emp_id\"] = result[0]","        output[\"first_name\"] = result[1]","        output[\"last_name\"] = result[2]","        output[\"primary_skills\"] = result[3]","        output[\"location\"] = result[4]","        ","    except Exception as e:","        print(e)","","    finally:","        cursor.close()","","    return render_template(\"getempoutput.html\", id=output[\"emp_id\"], fname=output[\"first_name\"],","                           lname=output[\"last_name\"], interest=output[\"primary_skills\"], location=output[\"location\"], color=color_codes[COLOR])","","if __name__ == '__main__':","    ","    # Check for Command Line Parameters for color","    parser = argparse.ArgumentParser()","    parser.add_argument('--color', required=False)","    args = parser.parse_args()","","    if args.color:","        print(\"Color from command line argument =\" + args.color)","        COLOR = args.color","        if COLOR_FROM_ENV:","            print(\"A color was set through environment variable -\" + COLOR_FROM_ENV + \". However, color from command line argument takes precendence.\")","    elif COLOR_FROM_ENV:","        print(\"No Command line argument. Color from environment variable =\" + COLOR_FROM_ENV)","        COLOR = COLOR_FROM_ENV","    else:","        print(\"No command line argument or environment variable. Picking a Random Color =\" + COLOR)","","    # Check if input color is a supported one","    if COLOR not in color_codes:","        print(\"Color not supported. Received '\" + COLOR + \"' expected one of \" + SUPPORTED_COLORS)","        exit(1)","","    app.run(host='0.0.0.0',port=8080,debug=True)",""]}],[{"start":{"row":0,"column":0},"end":{"row":136,"column":0},"action":"remove","lines":["from flask import Flask, render_template, request","from pymysql import connections","import os","import random","import argparse","","","app = Flask(__name__)","","DBHOST = os.environ.get(\"DBHOST\") or \"localhost\"","DBUSER = os.environ.get(\"DBUSER\") or \"root\"","DBPWD = os.environ.get(\"DBPWD\") or \"passwors\"","DATABASE = os.environ.get(\"DATABASE\") or \"employees\"","COLOR_FROM_ENV = os.environ.get('APP_COLOR') or \"lime\"","DBPORT = int(os.environ.get(\"DBPORT\"))","","# Create a connection to the MySQL database","db_conn = connections.Connection(","    host= DBHOST,","    port=DBPORT,","    user= DBUSER,","    password= DBPWD, ","    db= DATABASE","    ",")","output = {}","table = 'employee';","","# Define the supported color codes","color_codes = {","    \"red\": \"#e74c3c\",","    \"green\": \"#16a085\",","    \"blue\": \"#89CFF0\",","    \"blue2\": \"#30336b\",","    \"pink\": \"#f4c2c2\",","    \"darkblue\": \"#130f40\",","    \"lime\": \"#C1FF9C\",","}","","","# Create a string of supported colors","SUPPORTED_COLORS = \",\".join(color_codes.keys())","","# Generate a random color","COLOR = random.choice([\"red\", \"green\", \"blue\", \"blue2\", \"darkblue\", \"pink\", \"lime\"])","","","@app.route(\"/\", methods=['GET', 'POST'])","def home():","    return render_template('addemp.html', color=color_codes[COLOR])","","@app.route(\"/about\", methods=['GET','POST'])","def about():","    return render_template('about.html', color=color_codes[COLOR])","    ","@app.route(\"/addemp\", methods=['POST'])","def AddEmp():","    emp_id = request.form['emp_id']","    first_name = request.form['first_name']","    last_name = request.form['last_name']","    primary_skill = request.form['primary_skill']","    location = request.form['location']","","  ","    insert_sql = \"INSERT INTO employee VALUES (%s, %s, %s, %s, %s)\"","    cursor = db_conn.cursor()","","    try:","        ","        cursor.execute(insert_sql,(emp_id, first_name, last_name, primary_skill, location))","        db_conn.commit()","        emp_name = \"\" + first_name + \" \" + last_name","","    finally:","        cursor.close()","","    print(\"all modification done...\")","    return render_template('addempoutput.html', name=emp_name, color=color_codes[COLOR])","","@app.route(\"/getemp\", methods=['GET', 'POST'])","def GetEmp():","    return render_template(\"getemp.html\", color=color_codes[COLOR])","","","@app.route(\"/fetchdata\", methods=['GET','POST'])","def FetchData():","    emp_id = request.form['emp_id']","","    output = {}","    select_sql = \"SELECT emp_id, first_name, last_name, primary_skill, location from employee where emp_id=%s\"","    cursor = db_conn.cursor()","","    try:","        cursor.execute(select_sql,(emp_id))","        result = cursor.fetchone()","        ","        # Add No Employee found form","        output[\"emp_id\"] = result[0]","        output[\"first_name\"] = result[1]","        output[\"last_name\"] = result[2]","        output[\"primary_skills\"] = result[3]","        output[\"location\"] = result[4]","        ","    except Exception as e:","        print(e)","","    finally:","        cursor.close()","","    return render_template(\"getempoutput.html\", id=output[\"emp_id\"], fname=output[\"first_name\"],","                           lname=output[\"last_name\"], interest=output[\"primary_skills\"], location=output[\"location\"], color=color_codes[COLOR])","","if __name__ == '__main__':","    ","    # Check for Command Line Parameters for color","    parser = argparse.ArgumentParser()","    parser.add_argument('--color', required=False)","    args = parser.parse_args()","","    if args.color:","        print(\"Color from command line argument =\" + args.color)","        COLOR = args.color","        if COLOR_FROM_ENV:","            print(\"A color was set through environment variable -\" + COLOR_FROM_ENV + \". However, color from command line argument takes precendence.\")","    elif COLOR_FROM_ENV:","        print(\"No Command line argument. Color from environment variable =\" + COLOR_FROM_ENV)","        COLOR = COLOR_FROM_ENV","    else:","        print(\"No command line argument or environment variable. Picking a Random Color =\" + COLOR)","","    # Check if input color is a supported one","    if COLOR not in color_codes:","        print(\"Color not supported. Received '\" + COLOR + \"' expected one of \" + SUPPORTED_COLORS)","        exit(1)","","    app.run(host='0.0.0.0',port=8080,debug=True)",""],"id":20},{"start":{"row":0,"column":0},"end":{"row":128,"column":48},"action":"insert","lines":["from flask import Flask, render_template, request","from pymysql import connections","import os","import argparse","import boto3","import logging","","app = Flask(__name__)","","# DB Config from environment (Secrets in K8s)","DBHOST = os.environ.get(\"DBHOST\", \"localhost\")","DBUSER = os.environ.get(\"DBUSER\", \"root\")","DBPWD = os.environ.get(\"DBPWD\", \"password\")","DATABASE = os.environ.get(\"DATABASE\", \"employees\")","DBPORT = int(os.environ.get(\"DBPORT\", 3306))","","# Group info from ConfigMap","GROUP_NAME = os.environ.get(\"GROUP_NAME\", \"CLO835 Team\")","GROUP_SLOGAN = os.environ.get(\"GROUP_SLOGAN\", \"Delivering Cloud Excellence\")","","# Background image info from ConfigMap","BG_BUCKET = os.environ.get(\"BG_BUCKET\")","BG_KEY = os.environ.get(\"BG_KEY\")  # e.g., \"background.jpg\"","","# AWS credentials from Secrets","AWS_ACCESS_KEY_ID = os.environ.get(\"AWS_ACCESS_KEY_ID\")","AWS_SECRET_ACCESS_KEY = os.environ.get(\"AWS_SECRET_ACCESS_KEY\")","AWS_REGION = os.environ.get(\"AWS_REGION\", \"us-east-1\")","","# Static file path","BG_LOCAL_PATH = os.path.join(\"static\", \"background.jpg\")","","# Logging setup","logging.basicConfig(level=logging.INFO)","","# Download background image from private S3","def download_background():","    if not BG_BUCKET or not BG_KEY:","        app.logger.warning(\"Background image S3 details are not set.\")","        return","    try:","        s3_client = boto3.client(","            \"s3\",","            aws_access_key_id=AWS_ACCESS_KEY_ID,","            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,","            region_name=AWS_REGION","        )","        s3_client.download_file(BG_BUCKET, BG_KEY, BG_LOCAL_PATH)","        app.logger.info(f\"Background image downloaded from s3://{BG_BUCKET}/{BG_KEY}\")","    except Exception as e:","        app.logger.error(f\"Failed to download background image: {e}\")","","# MySQL Connection","db_conn = connections.Connection(","    host=DBHOST,","    port=DBPORT,","    user=DBUSER,","    password=DBPWD,","    db=DATABASE",")","","@app.route(\"/\", methods=['GET', 'POST'])","def home():","    return render_template('addemp.html', group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/about\", methods=['GET','POST'])","def about():","    return render_template('about.html', group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/addemp\", methods=['POST'])","def AddEmp():","    emp_id = request.form['emp_id']","    first_name = request.form['first_name']","    last_name = request.form['last_name']","    primary_skill = request.form['primary_skill']","    location = request.form['location']","","    insert_sql = \"INSERT INTO employee VALUES (%s, %s, %s, %s, %s)\"","    cursor = db_conn.cursor()","    try:","        cursor.execute(insert_sql, (emp_id, first_name, last_name, primary_skill, location))","        db_conn.commit()","        emp_name = f\"{first_name} {last_name}\"","    finally:","        cursor.close()","","    return render_template('addempoutput.html', name=emp_name, group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/getemp\", methods=['GET', 'POST'])","def GetEmp():","    return render_template(\"getemp.html\", group_name=GROUP_NAME, group_slogan=GROUP_SLOGAN)","","@app.route(\"/fetchdata\", methods=['GET','POST'])","def FetchData():","    emp_id = request.form['emp_id']","    output = {}","    select_sql = \"SELECT emp_id, first_name, last_name, primary_skill, location FROM employee WHERE emp_id=%s\"","    cursor = db_conn.cursor()","","    try:","        cursor.execute(select_sql, (emp_id,))","        result = cursor.fetchone()","        if result:","            output[\"emp_id\"], output[\"first_name\"], output[\"last_name\"], output[\"primary_skills\"], output[\"location\"] = result","        else:","            return f\"No employee found with ID {emp_id}\"","    except Exception as e:","        app.logger.error(e)","    finally:","        cursor.close()","","    return render_template(","        \"getempoutput.html\",","        id=output[\"emp_id\"],","        fname=output[\"first_name\"],","        lname=output[\"last_name\"],","        interest=output[\"primary_skills\"],","        location=output[\"location\"],","        group_name=GROUP_NAME,","        group_slogan=GROUP_SLOGAN","    )","","if __name__ == '__main__':","    parser = argparse.ArgumentParser()","    parser.add_argument('--port', required=False, type=int, default=81)","    args = parser.parse_args()","","    download_background()","    app.run(host='0.0.0.0', port=81, debug=True)"]}],[{"start":{"row":128,"column":33},"end":{"row":128,"column":35},"action":"remove","lines":["81"],"id":21},{"start":{"row":128,"column":33},"end":{"row":128,"column":37},"action":"insert","lines":["args"]}],[{"start":{"row":128,"column":37},"end":{"row":128,"column":38},"action":"insert","lines":["."],"id":22}],[{"start":{"row":128,"column":38},"end":{"row":128,"column":39},"action":"insert","lines":["-"],"id":23},{"start":{"row":128,"column":39},"end":{"row":128,"column":40},"action":"insert","lines":["-"]}],[{"start":{"row":128,"column":39},"end":{"row":128,"column":40},"action":"remove","lines":["-"],"id":24},{"start":{"row":128,"column":38},"end":{"row":128,"column":39},"action":"remove","lines":["-"]},{"start":{"row":128,"column":37},"end":{"row":128,"column":38},"action":"remove","lines":["."]}],[{"start":{"row":128,"column":37},"end":{"row":128,"column":38},"action":"insert","lines":["."],"id":25}],[{"start":{"row":128,"column":38},"end":{"row":128,"column":39},"action":"insert","lines":["p"],"id":26},{"start":{"row":128,"column":39},"end":{"row":128,"column":40},"action":"insert","lines":["o"]},{"start":{"row":128,"column":40},"end":{"row":128,"column":41},"action":"insert","lines":["r"]},{"start":{"row":128,"column":41},"end":{"row":128,"column":42},"action":"insert","lines":["t"]}],[{"start":{"row":17,"column":43},"end":{"row":17,"column":54},"action":"remove","lines":["CLO835 Team"],"id":27},{"start":{"row":17,"column":43},"end":{"row":17,"column":44},"action":"insert","lines":["S"]},{"start":{"row":17,"column":44},"end":{"row":17,"column":45},"action":"insert","lines":["U"]},{"start":{"row":17,"column":45},"end":{"row":17,"column":46},"action":"insert","lines":["W"]},{"start":{"row":17,"column":46},"end":{"row":17,"column":47},"action":"insert","lines":["A"]},{"start":{"row":17,"column":47},"end":{"row":17,"column":48},"action":"insert","lines":["Y"]},{"start":{"row":17,"column":48},"end":{"row":17,"column":49},"action":"insert","lines":["S"]}],[{"start":{"row":18,"column":47},"end":{"row":18,"column":74},"action":"remove","lines":["Delivering Cloud Excellence"],"id":28},{"start":{"row":18,"column":46},"end":{"row":18,"column":48},"action":"remove","lines":["\"\""]}],[{"start":{"row":18,"column":46},"end":{"row":18,"column":48},"action":"insert","lines":["\"\""],"id":29}],[{"start":{"row":18,"column":47},"end":{"row":18,"column":48},"action":"insert","lines":["M"],"id":30},{"start":{"row":18,"column":48},"end":{"row":18,"column":49},"action":"insert","lines":["I"]}],[{"start":{"row":18,"column":48},"end":{"row":18,"column":49},"action":"remove","lines":["I"],"id":31},{"start":{"row":18,"column":47},"end":{"row":18,"column":48},"action":"remove","lines":["M"]}],[{"start":{"row":18,"column":47},"end":{"row":18,"column":48},"action":"insert","lines":["E"],"id":32},{"start":{"row":18,"column":48},"end":{"row":18,"column":49},"action":"insert","lines":["E"]}],[{"start":{"row":18,"column":48},"end":{"row":18,"column":49},"action":"remove","lines":["E"],"id":33}],[{"start":{"row":18,"column":48},"end":{"row":18,"column":49},"action":"insert","lines":["A"],"id":34},{"start":{"row":18,"column":49},"end":{"row":18,"column":50},"action":"insert","lines":["T"]},{"start":{"row":18,"column":50},"end":{"row":18,"column":51},"action":"insert","lines":["."]},{"start":{"row":18,"column":51},"end":{"row":18,"column":52},"action":"insert","lines":["S"]},{"start":{"row":18,"column":52},"end":{"row":18,"column":53},"action":"insert","lines":["L"]},{"start":{"row":18,"column":53},"end":{"row":18,"column":54},"action":"insert","lines":["E"]},{"start":{"row":18,"column":54},"end":{"row":18,"column":55},"action":"insert","lines":["E"]}],[{"start":{"row":18,"column":55},"end":{"row":18,"column":56},"action":"insert","lines":["P"],"id":35},{"start":{"row":18,"column":56},"end":{"row":18,"column":57},"action":"insert","lines":["."]},{"start":{"row":18,"column":57},"end":{"row":18,"column":58},"action":"insert","lines":["R"]},{"start":{"row":18,"column":58},"end":{"row":18,"column":59},"action":"insert","lines":["E"]},{"start":{"row":18,"column":59},"end":{"row":18,"column":60},"action":"insert","lines":["P"]},{"start":{"row":18,"column":60},"end":{"row":18,"column":61},"action":"insert","lines":["E"]}],[{"start":{"row":18,"column":61},"end":{"row":18,"column":62},"action":"insert","lines":["A"],"id":36},{"start":{"row":18,"column":62},"end":{"row":18,"column":63},"action":"insert","lines":["T"]},{"start":{"row":18,"column":63},"end":{"row":18,"column":64},"action":"insert","lines":["."]},{"start":{"row":18,"column":64},"end":{"row":18,"column":65},"action":"insert","lines":["E"]},{"start":{"row":18,"column":65},"end":{"row":18,"column":66},"action":"insert","lines":["A"]}],[{"start":{"row":18,"column":65},"end":{"row":18,"column":66},"action":"remove","lines":["A"],"id":37},{"start":{"row":18,"column":64},"end":{"row":18,"column":65},"action":"remove","lines":["E"]},{"start":{"row":18,"column":63},"end":{"row":18,"column":64},"action":"remove","lines":["."]}],[{"start":{"row":18,"column":63},"end":{"row":18,"column":64},"action":"insert","lines":["."],"id":38},{"start":{"row":18,"column":64},"end":{"row":18,"column":65},"action":"insert","lines":["S"]},{"start":{"row":18,"column":65},"end":{"row":18,"column":66},"action":"insert","lines":["T"]},{"start":{"row":18,"column":66},"end":{"row":18,"column":67},"action":"insert","lines":["R"]},{"start":{"row":18,"column":67},"end":{"row":18,"column":68},"action":"insert","lines":["E"]},{"start":{"row":18,"column":68},"end":{"row":18,"column":69},"action":"insert","lines":["S"]},{"start":{"row":18,"column":69},"end":{"row":18,"column":70},"action":"insert","lines":["S"]}],[{"start":{"row":18,"column":70},"end":{"row":18,"column":71},"action":"insert","lines":["="],"id":39},{"start":{"row":18,"column":71},"end":{"row":18,"column":72},"action":"insert","lines":["="]}],[{"start":{"row":18,"column":71},"end":{"row":18,"column":72},"action":"remove","lines":["="],"id":40},{"start":{"row":18,"column":70},"end":{"row":18,"column":71},"action":"remove","lines":["="]},{"start":{"row":18,"column":69},"end":{"row":18,"column":70},"action":"remove","lines":["S"]},{"start":{"row":18,"column":68},"end":{"row":18,"column":69},"action":"remove","lines":["S"]},{"start":{"row":18,"column":67},"end":{"row":18,"column":68},"action":"remove","lines":["E"]},{"start":{"row":18,"column":66},"end":{"row":18,"column":67},"action":"remove","lines":["R"]},{"start":{"row":18,"column":65},"end":{"row":18,"column":66},"action":"remove","lines":["T"]},{"start":{"row":18,"column":64},"end":{"row":18,"column":65},"action":"remove","lines":["S"]},{"start":{"row":18,"column":63},"end":{"row":18,"column":64},"action":"remove","lines":["."]}],[{"start":{"row":10,"column":35},"end":{"row":10,"column":44},"action":"remove","lines":["localhost"],"id":41},{"start":{"row":10,"column":35},"end":{"row":10,"column":36},"action":"insert","lines":["m"]},{"start":{"row":10,"column":36},"end":{"row":10,"column":37},"action":"insert","lines":["y"]}],[{"start":{"row":10,"column":35},"end":{"row":10,"column":37},"action":"remove","lines":["my"],"id":42},{"start":{"row":10,"column":35},"end":{"row":10,"column":40},"action":"insert","lines":["mysql"]}],[{"start":{"row":10,"column":40},"end":{"row":10,"column":41},"action":"insert","lines":["-"],"id":43},{"start":{"row":10,"column":41},"end":{"row":10,"column":42},"action":"insert","lines":["d"]},{"start":{"row":10,"column":42},"end":{"row":10,"column":43},"action":"insert","lines":["b"]}],[{"start":{"row":52,"column":0},"end":{"row":52,"column":2},"action":"insert","lines":["# "],"id":45},{"start":{"row":53,"column":0},"end":{"row":53,"column":2},"action":"insert","lines":["# "]},{"start":{"row":54,"column":0},"end":{"row":54,"column":2},"action":"insert","lines":["# "]},{"start":{"row":55,"column":0},"end":{"row":55,"column":2},"action":"insert","lines":["# "]},{"start":{"row":56,"column":0},"end":{"row":56,"column":2},"action":"insert","lines":["# "]},{"start":{"row":57,"column":0},"end":{"row":57,"column":2},"action":"insert","lines":["# "]},{"start":{"row":58,"column":0},"end":{"row":58,"column":2},"action":"insert","lines":["# "]},{"start":{"row":59,"column":0},"end":{"row":59,"column":2},"action":"insert","lines":["# "]}],[{"start":{"row":59,"column":3},"end":{"row":60,"column":0},"action":"insert","lines":["",""],"id":46},{"start":{"row":60,"column":0},"end":{"row":61,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":61,"column":0},"end":{"row":74,"column":69},"action":"insert","lines":["# MySQL Connection - Make it optional for local testing","db_conn = None","try:","    db_conn = connections.Connection(","        host=DBHOST,","        port=DBPORT,","        user=DBUSER,","        password=DBPWD,","        db=DATABASE","    )","    app.logger.info(\"Successfully connected to MySQL database\")","except Exception as e:","    app.logger.warning(f\"Could not connect to MySQL database: {e}\")","    app.logger.warning(\"Running in local test mode without database\")"],"id":47}]]},"ace":{"folds":[],"scrolltop":929.8000000000017,"scrollleft":0,"selection":{"start":{"row":74,"column":69},"end":{"row":74,"column":69},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":47,"state":"start","mode":"ace/mode/python"}},"timestamp":1754856392855,"hash":"abe9615600b111ef31a7b07655e76b92526448ed"}